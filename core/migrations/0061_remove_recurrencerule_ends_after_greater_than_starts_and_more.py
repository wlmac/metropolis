# Generated by Django 4.0.10 on 2023-04-02 04:50

from django.db import migrations, models
import multiselectfield.db.fields


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0060_event_should_announce_recurrencerule_and_more'),
    ]

    operations = [
        migrations.RemoveConstraint(
            model_name='recurrencerule',
            name='ends_after_greater_than_starts',
        ),
        migrations.RemoveField(
            model_name='recurrencerule',
            name='starts',
        ),
        migrations.AlterField(
            model_name='recurrencerule',
            name='ends',
            field=models.DateTimeField(blank=True, help_text='the date and time the repetition ends.', null=True),
        ),
        migrations.AlterField(
            model_name='recurrencerule',
            name='ends_after',
            field=models.PositiveSmallIntegerField(blank=True, help_text='the number of times to repeat the event before ending. e.g. 5 would mean the event will repeat 5 times before ending.', null=True),
        ),
        migrations.AlterField(
            model_name='recurrencerule',
            name='repeat_on',
            field=multiselectfield.db.fields.MultiSelectField(blank=True, choices=[(0, 'Monday'), (1, 'Tuesday'), (2, 'Wednesday'), (3, 'Thursday'), (4, 'Friday'), (5, 'Saturday'), (6, 'Sunday')], help_text='the days of the week to repeat on. or if type=MONTHLY, the first or last of x day to repeat on)', max_length=13, null=True),
        ),
        migrations.AlterField(
            model_name='recurrencerule',
            name='repeat_type',
            field=models.IntegerField(blank=True, choices=[(0, 'First'), (1, 'Last'), (2, 'Day')], help_text='the type of monthly repetition to use. (e.g. first, last, day)', null=True),
        ),
        migrations.AlterField(
            model_name='recurrencerule',
            name='type',
            field=models.CharField(choices=[('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly'), ('yearly', 'Yearly')], help_text='the type of repetition. (e.g. daily, weekly, monthly, yearly)', max_length=16),
        ),
        migrations.AddConstraint(
            model_name='recurrencerule',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('repeats_every__gt', 1), ('type', 'daily')), models.Q(('type', 'daily'), _negated=True), _connector='OR'), name='daily_repeat_every_gt_1'),
        ),
    ]
